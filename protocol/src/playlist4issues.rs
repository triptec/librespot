// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ClientIssue {
    // message fields
    level: ::std::option::Option<ClientIssue_Level>,
    code: ::std::option::Option<ClientIssue_Code>,
    repeatCount: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ClientIssue {}

impl ClientIssue {
    pub fn new() -> ClientIssue {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ClientIssue {
        static mut instance: ::protobuf::lazy::Lazy<ClientIssue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientIssue,
        };
        unsafe {
            instance.get(ClientIssue::new)
        }
    }

    // optional .ClientIssue.Level level = 1;

    pub fn clear_level(&mut self) {
        self.level = ::std::option::Option::None;
    }

    pub fn has_level(&self) -> bool {
        self.level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: ClientIssue_Level) {
        self.level = ::std::option::Option::Some(v);
    }

    pub fn get_level(&self) -> ClientIssue_Level {
        self.level.unwrap_or(ClientIssue_Level::LEVEL_UNKNOWN)
    }

    fn get_level_for_reflect(&self) -> &::std::option::Option<ClientIssue_Level> {
        &self.level
    }

    fn mut_level_for_reflect(&mut self) -> &mut ::std::option::Option<ClientIssue_Level> {
        &mut self.level
    }

    // optional .ClientIssue.Code code = 2;

    pub fn clear_code(&mut self) {
        self.code = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ClientIssue_Code) {
        self.code = ::std::option::Option::Some(v);
    }

    pub fn get_code(&self) -> ClientIssue_Code {
        self.code.unwrap_or(ClientIssue_Code::CODE_UNKNOWN)
    }

    fn get_code_for_reflect(&self) -> &::std::option::Option<ClientIssue_Code> {
        &self.code
    }

    fn mut_code_for_reflect(&mut self) -> &mut ::std::option::Option<ClientIssue_Code> {
        &mut self.code
    }

    // optional int32 repeatCount = 3;

    pub fn clear_repeatCount(&mut self) {
        self.repeatCount = ::std::option::Option::None;
    }

    pub fn has_repeatCount(&self) -> bool {
        self.repeatCount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_repeatCount(&mut self, v: i32) {
        self.repeatCount = ::std::option::Option::Some(v);
    }

    pub fn get_repeatCount(&self) -> i32 {
        self.repeatCount.unwrap_or(0)
    }

    fn get_repeatCount_for_reflect(&self) -> &::std::option::Option<i32> {
        &self.repeatCount
    }

    fn mut_repeatCount_for_reflect(&mut self) -> &mut ::std::option::Option<i32> {
        &mut self.repeatCount
    }
}

impl ::protobuf::Message for ClientIssue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.level = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.code = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int32()?;
                    self.repeatCount = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.level {
            my_size += ::protobuf::rt::enum_size(1, v);
        };
        if let Some(v) = self.code {
            my_size += ::protobuf::rt::enum_size(2, v);
        };
        if let Some(v) = self.repeatCount {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.level {
            os.write_enum(1, v.value())?;
        };
        if let Some(v) = self.code {
            os.write_enum(2, v.value())?;
        };
        if let Some(v) = self.repeatCount {
            os.write_int32(3, v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ClientIssue {
    fn new() -> ClientIssue {
        ClientIssue::new()
    }

    fn descriptor_static(_: ::std::option::Option<ClientIssue>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientIssue_Level>>(
                    "level",
                    ClientIssue::get_level_for_reflect,
                    ClientIssue::mut_level_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientIssue_Code>>(
                    "code",
                    ClientIssue::get_code_for_reflect,
                    ClientIssue::mut_code_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "repeatCount",
                    ClientIssue::get_repeatCount_for_reflect,
                    ClientIssue::mut_repeatCount_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientIssue>(
                    "ClientIssue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ClientIssue {
    fn clear(&mut self) {
        self.clear_level();
        self.clear_code();
        self.clear_repeatCount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientIssue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientIssue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientIssue_Level {
    LEVEL_UNKNOWN = 0,
    LEVEL_DEBUG = 1,
    LEVEL_INFO = 2,
    LEVEL_NOTICE = 3,
    LEVEL_WARNING = 4,
    LEVEL_ERROR = 5,
}

impl ::protobuf::ProtobufEnum for ClientIssue_Level {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientIssue_Level> {
        match value {
            0 => ::std::option::Option::Some(ClientIssue_Level::LEVEL_UNKNOWN),
            1 => ::std::option::Option::Some(ClientIssue_Level::LEVEL_DEBUG),
            2 => ::std::option::Option::Some(ClientIssue_Level::LEVEL_INFO),
            3 => ::std::option::Option::Some(ClientIssue_Level::LEVEL_NOTICE),
            4 => ::std::option::Option::Some(ClientIssue_Level::LEVEL_WARNING),
            5 => ::std::option::Option::Some(ClientIssue_Level::LEVEL_ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientIssue_Level] = &[
            ClientIssue_Level::LEVEL_UNKNOWN,
            ClientIssue_Level::LEVEL_DEBUG,
            ClientIssue_Level::LEVEL_INFO,
            ClientIssue_Level::LEVEL_NOTICE,
            ClientIssue_Level::LEVEL_WARNING,
            ClientIssue_Level::LEVEL_ERROR,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ClientIssue_Level>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ClientIssue_Level", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ClientIssue_Level {
}

impl ::protobuf::reflect::ProtobufValue for ClientIssue_Level {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientIssue_Code {
    CODE_UNKNOWN = 0,
    CODE_INDEX_OUT_OF_BOUNDS = 1,
    CODE_VERSION_MISMATCH = 2,
    CODE_CACHED_CHANGE = 3,
    CODE_OFFLINE_CHANGE = 4,
    CODE_CONCURRENT_CHANGE = 5,
}

impl ::protobuf::ProtobufEnum for ClientIssue_Code {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientIssue_Code> {
        match value {
            0 => ::std::option::Option::Some(ClientIssue_Code::CODE_UNKNOWN),
            1 => ::std::option::Option::Some(ClientIssue_Code::CODE_INDEX_OUT_OF_BOUNDS),
            2 => ::std::option::Option::Some(ClientIssue_Code::CODE_VERSION_MISMATCH),
            3 => ::std::option::Option::Some(ClientIssue_Code::CODE_CACHED_CHANGE),
            4 => ::std::option::Option::Some(ClientIssue_Code::CODE_OFFLINE_CHANGE),
            5 => ::std::option::Option::Some(ClientIssue_Code::CODE_CONCURRENT_CHANGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientIssue_Code] = &[
            ClientIssue_Code::CODE_UNKNOWN,
            ClientIssue_Code::CODE_INDEX_OUT_OF_BOUNDS,
            ClientIssue_Code::CODE_VERSION_MISMATCH,
            ClientIssue_Code::CODE_CACHED_CHANGE,
            ClientIssue_Code::CODE_OFFLINE_CHANGE,
            ClientIssue_Code::CODE_CONCURRENT_CHANGE,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ClientIssue_Code>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ClientIssue_Code", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ClientIssue_Code {
}

impl ::protobuf::reflect::ProtobufValue for ClientIssue_Code {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientResolveAction {
    // message fields
    code: ::std::option::Option<ClientResolveAction_Code>,
    initiator: ::std::option::Option<ClientResolveAction_Initiator>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ClientResolveAction {}

impl ClientResolveAction {
    pub fn new() -> ClientResolveAction {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ClientResolveAction {
        static mut instance: ::protobuf::lazy::Lazy<ClientResolveAction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientResolveAction,
        };
        unsafe {
            instance.get(ClientResolveAction::new)
        }
    }

    // optional .ClientResolveAction.Code code = 1;

    pub fn clear_code(&mut self) {
        self.code = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ClientResolveAction_Code) {
        self.code = ::std::option::Option::Some(v);
    }

    pub fn get_code(&self) -> ClientResolveAction_Code {
        self.code.unwrap_or(ClientResolveAction_Code::CODE_UNKNOWN)
    }

    fn get_code_for_reflect(&self) -> &::std::option::Option<ClientResolveAction_Code> {
        &self.code
    }

    fn mut_code_for_reflect(&mut self) -> &mut ::std::option::Option<ClientResolveAction_Code> {
        &mut self.code
    }

    // optional .ClientResolveAction.Initiator initiator = 2;

    pub fn clear_initiator(&mut self) {
        self.initiator = ::std::option::Option::None;
    }

    pub fn has_initiator(&self) -> bool {
        self.initiator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initiator(&mut self, v: ClientResolveAction_Initiator) {
        self.initiator = ::std::option::Option::Some(v);
    }

    pub fn get_initiator(&self) -> ClientResolveAction_Initiator {
        self.initiator.unwrap_or(ClientResolveAction_Initiator::INITIATOR_UNKNOWN)
    }

    fn get_initiator_for_reflect(&self) -> &::std::option::Option<ClientResolveAction_Initiator> {
        &self.initiator
    }

    fn mut_initiator_for_reflect(&mut self) -> &mut ::std::option::Option<ClientResolveAction_Initiator> {
        &mut self.initiator
    }
}

impl ::protobuf::Message for ClientResolveAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.code = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.initiator = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.code {
            my_size += ::protobuf::rt::enum_size(1, v);
        };
        if let Some(v) = self.initiator {
            my_size += ::protobuf::rt::enum_size(2, v);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.code {
            os.write_enum(1, v.value())?;
        };
        if let Some(v) = self.initiator {
            os.write_enum(2, v.value())?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ClientResolveAction {
    fn new() -> ClientResolveAction {
        ClientResolveAction::new()
    }

    fn descriptor_static(_: ::std::option::Option<ClientResolveAction>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientResolveAction_Code>>(
                    "code",
                    ClientResolveAction::get_code_for_reflect,
                    ClientResolveAction::mut_code_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientResolveAction_Initiator>>(
                    "initiator",
                    ClientResolveAction::get_initiator_for_reflect,
                    ClientResolveAction::mut_initiator_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientResolveAction>(
                    "ClientResolveAction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ClientResolveAction {
    fn clear(&mut self) {
        self.clear_code();
        self.clear_initiator();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientResolveAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientResolveAction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientResolveAction_Code {
    CODE_UNKNOWN = 0,
    CODE_NO_ACTION = 1,
    CODE_RETRY = 2,
    CODE_RELOAD = 3,
    CODE_DISCARD_LOCAL_CHANGES = 4,
    CODE_SEND_DUMP = 5,
    CODE_DISPLAY_ERROR_MESSAGE = 6,
}

impl ::protobuf::ProtobufEnum for ClientResolveAction_Code {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientResolveAction_Code> {
        match value {
            0 => ::std::option::Option::Some(ClientResolveAction_Code::CODE_UNKNOWN),
            1 => ::std::option::Option::Some(ClientResolveAction_Code::CODE_NO_ACTION),
            2 => ::std::option::Option::Some(ClientResolveAction_Code::CODE_RETRY),
            3 => ::std::option::Option::Some(ClientResolveAction_Code::CODE_RELOAD),
            4 => ::std::option::Option::Some(ClientResolveAction_Code::CODE_DISCARD_LOCAL_CHANGES),
            5 => ::std::option::Option::Some(ClientResolveAction_Code::CODE_SEND_DUMP),
            6 => ::std::option::Option::Some(ClientResolveAction_Code::CODE_DISPLAY_ERROR_MESSAGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientResolveAction_Code] = &[
            ClientResolveAction_Code::CODE_UNKNOWN,
            ClientResolveAction_Code::CODE_NO_ACTION,
            ClientResolveAction_Code::CODE_RETRY,
            ClientResolveAction_Code::CODE_RELOAD,
            ClientResolveAction_Code::CODE_DISCARD_LOCAL_CHANGES,
            ClientResolveAction_Code::CODE_SEND_DUMP,
            ClientResolveAction_Code::CODE_DISPLAY_ERROR_MESSAGE,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ClientResolveAction_Code>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ClientResolveAction_Code", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ClientResolveAction_Code {
}

impl ::protobuf::reflect::ProtobufValue for ClientResolveAction_Code {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientResolveAction_Initiator {
    INITIATOR_UNKNOWN = 0,
    INITIATOR_SERVER = 1,
    INITIATOR_CLIENT = 2,
}

impl ::protobuf::ProtobufEnum for ClientResolveAction_Initiator {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientResolveAction_Initiator> {
        match value {
            0 => ::std::option::Option::Some(ClientResolveAction_Initiator::INITIATOR_UNKNOWN),
            1 => ::std::option::Option::Some(ClientResolveAction_Initiator::INITIATOR_SERVER),
            2 => ::std::option::Option::Some(ClientResolveAction_Initiator::INITIATOR_CLIENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientResolveAction_Initiator] = &[
            ClientResolveAction_Initiator::INITIATOR_UNKNOWN,
            ClientResolveAction_Initiator::INITIATOR_SERVER,
            ClientResolveAction_Initiator::INITIATOR_CLIENT,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ClientResolveAction_Initiator>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ClientResolveAction_Initiator", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ClientResolveAction_Initiator {
}

impl ::protobuf::reflect::ProtobufValue for ClientResolveAction_Initiator {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x34, 0x69, 0x73, 0x73, 0x75, 0x65,
    0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x03, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65,
    0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
    0x73, 0x73, 0x75, 0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
    0x6c, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
    0x11, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x43, 0x6f,
    0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65,
    0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
    0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x05, 0x4c, 0x65,
    0x76, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b,
    0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
    0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c,
    0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x56, 0x45, 0x4c,
    0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x56,
    0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
    0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x22, 0x9e, 0x01,
    0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55,
    0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x44, 0x45,
    0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x4f,
    0x55, 0x4e, 0x44, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x56,
    0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
    0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44,
    0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x44,
    0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
    0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x55,
    0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x22, 0xf6,
    0x02, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
    0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
    0x6f, 0x6c, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
    0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
    0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
    0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
    0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
    0x74, 0x6f, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c,
    0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12,
    0x0a, 0x0e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
    0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59,
    0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41,
    0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43,
    0x41, 0x52, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
    0x53, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44,
    0x5f, 0x44, 0x55, 0x4d, 0x50, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x44, 0x45, 0x5f,
    0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45,
    0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x06, 0x22, 0x4e, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x69,
    0x61, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f,
    0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49,
    0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10,
    0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43,
    0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x4a, 0x95, 0x0c, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00,
    0x29, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x0a, 0x0a, 0x02,
    0x04, 0x00, 0x12, 0x04, 0x02, 0x00, 0x16, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12,
    0x03, 0x02, 0x08, 0x13, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x03, 0x04,
    0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x03, 0x04, 0x0c, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x03, 0x0d, 0x12, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x03, 0x13, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x03, 0x1b, 0x1e, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x04,
    0x00, 0x12, 0x04, 0x04, 0x04, 0x0b, 0x05, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x04, 0x00, 0x01,
    0x12, 0x03, 0x04, 0x09, 0x0e, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x12,
    0x03, 0x05, 0x08, 0x1c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x05, 0x08, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12,
    0x03, 0x05, 0x18, 0x1b, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03,
    0x06, 0x08, 0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03,
    0x06, 0x08, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03,
    0x06, 0x16, 0x19, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x07,
    0x08, 0x19, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x07,
    0x08, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x07,
    0x15, 0x18, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x08, 0x08,
    0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x08, 0x08,
    0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x08, 0x17,
    0x1a, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x09, 0x08, 0x1c,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x09, 0x08, 0x15,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03, 0x09, 0x18, 0x1b,
    0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x0a, 0x08, 0x1a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x0a, 0x08, 0x13, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x02, 0x12, 0x03, 0x0a, 0x16, 0x19, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x0c, 0x04, 0x1d, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x0c, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x01, 0x06, 0x12, 0x03, 0x0c, 0x0d, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01,
    0x01, 0x12, 0x03, 0x0c, 0x12, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12,
    0x03, 0x0c, 0x19, 0x1c, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x04, 0x01, 0x12, 0x04, 0x0d, 0x04,
    0x14, 0x05, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x04, 0x01, 0x01, 0x12, 0x03, 0x0d, 0x09, 0x0d,
    0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x0e, 0x08, 0x1b, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0e, 0x08, 0x14, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x00, 0x02, 0x12, 0x03, 0x0e, 0x17, 0x1a, 0x0a,
    0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x0f, 0x08, 0x27, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0f, 0x08, 0x20, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x01, 0x02, 0x12, 0x03, 0x0f, 0x23, 0x26, 0x0a, 0x0d,
    0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x10, 0x08, 0x24, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x10, 0x08, 0x1d, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x02, 0x02, 0x12, 0x03, 0x10, 0x20, 0x23, 0x0a, 0x0d, 0x0a,
    0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x03, 0x12, 0x03, 0x11, 0x08, 0x21, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x01, 0x02, 0x03, 0x01, 0x12, 0x03, 0x11, 0x08, 0x1a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x01, 0x02, 0x03, 0x02, 0x12, 0x03, 0x11, 0x1d, 0x20, 0x0a, 0x0d, 0x0a, 0x06,
    0x04, 0x00, 0x04, 0x01, 0x02, 0x04, 0x12, 0x03, 0x12, 0x08, 0x22, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x04, 0x01, 0x02, 0x04, 0x01, 0x12, 0x03, 0x12, 0x08, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x04, 0x01, 0x02, 0x04, 0x02, 0x12, 0x03, 0x12, 0x1e, 0x21, 0x0a, 0x0d, 0x0a, 0x06, 0x04,
    0x00, 0x04, 0x01, 0x02, 0x05, 0x12, 0x03, 0x13, 0x08, 0x25, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x01, 0x02, 0x05, 0x01, 0x12, 0x03, 0x13, 0x08, 0x1e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x01, 0x02, 0x05, 0x02, 0x12, 0x03, 0x13, 0x21, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x02, 0x12, 0x03, 0x15, 0x04, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x04,
    0x12, 0x03, 0x15, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x05, 0x12, 0x03,
    0x15, 0x0d, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x15, 0x13,
    0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x15, 0x21, 0x24, 0x0a,
    0x0a, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x18, 0x00, 0x29, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x01, 0x01, 0x12, 0x03, 0x18, 0x08, 0x1b, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12,
    0x03, 0x19, 0x04, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x03, 0x19,
    0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x19, 0x0d, 0x11,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x19, 0x12, 0x16, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x19, 0x19, 0x1c, 0x0a, 0x0c, 0x0a, 0x04,
    0x04, 0x01, 0x04, 0x00, 0x12, 0x04, 0x1a, 0x04, 0x22, 0x05, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x04, 0x00, 0x01, 0x12, 0x03, 0x1a, 0x09, 0x0d, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00,
    0x02, 0x00, 0x12, 0x03, 0x1b, 0x08, 0x1b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x1b, 0x08, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02,
    0x00, 0x02, 0x12, 0x03, 0x1b, 0x17, 0x1a, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00, 0x02,
    0x01, 0x12, 0x03, 0x1c, 0x08, 0x1d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x01,
    0x01, 0x12, 0x03, 0x1c, 0x08, 0x16, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x01,
    0x02, 0x12, 0x03, 0x1c, 0x19, 0x1c, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00, 0x02, 0x02,
    0x12, 0x03, 0x1d, 0x08, 0x19, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x02, 0x01,
    0x12, 0x03, 0x1d, 0x08, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x02, 0x02,
    0x12, 0x03, 0x1d, 0x15, 0x18, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00, 0x02, 0x03, 0x12,
    0x03, 0x1e, 0x08, 0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12,
    0x03, 0x1e, 0x08, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12,
    0x03, 0x1e, 0x16, 0x19, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03,
    0x1f, 0x08, 0x29, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03,
    0x1f, 0x08, 0x22, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03,
    0x1f, 0x25, 0x28, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x20,
    0x08, 0x1d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x20,
    0x08, 0x16, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x05, 0x02, 0x12, 0x03, 0x20,
    0x19, 0x1c, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x00, 0x02, 0x06, 0x12, 0x03, 0x21, 0x08,
    0x29, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x06, 0x01, 0x12, 0x03, 0x21, 0x08,
    0x22, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x00, 0x02, 0x06, 0x02, 0x12, 0x03, 0x21, 0x25,
    0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x23, 0x04, 0x27, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x03, 0x23, 0x04, 0x0c, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x03, 0x23, 0x0d, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x01, 0x01, 0x12, 0x03, 0x23, 0x17, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01,
    0x03, 0x12, 0x03, 0x23, 0x23, 0x26, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x01, 0x04, 0x01, 0x12, 0x04,
    0x24, 0x04, 0x28, 0x05, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x04, 0x01, 0x01, 0x12, 0x03, 0x24,
    0x09, 0x12, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x25, 0x08,
    0x20, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x25, 0x08,
    0x19, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x01, 0x02, 0x00, 0x02, 0x12, 0x03, 0x25, 0x1c,
    0x1f, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x26, 0x08, 0x1f,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x26, 0x08, 0x18,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x01, 0x02, 0x01, 0x02, 0x12, 0x03, 0x26, 0x1b, 0x1e,
    0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x01, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x27, 0x08, 0x1f, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x27, 0x08, 0x18, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x01, 0x04, 0x01, 0x02, 0x02, 0x02, 0x12, 0x03, 0x27, 0x1b, 0x1e,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
